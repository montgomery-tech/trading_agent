#!/usr/bin/env python3
"""
Test Suite for Pre-trade Risk Validation System

This test suite validates the Pre-trade Risk Validation functionality
to ensure all risk checks are working correctly.

Save as: test_pre_trade_risk_validation.py
Run with: python3 test_pre_trade_risk_validation.py
"""

import sys
import time
from pathlib import Path
from decimal import Decimal
from typing import List

# Add src to Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

try:
    from trading_systems.risk.pre_trade_checks import (
        PreTradeRiskValidator,
        RiskLimits,
        AccountBalance,
        PositionInfo,
        TradingStatistics,
        RiskCheckResponse,
        RiskCheckResult,
        RiskLevel,
        RiskAnalyzer,
        validate_order_with_defaults,
        create_conservative_limits,
        create_aggressive_limits
    )
    from trading_systems.exchanges.kraken.order_requests import (
        create_market_order,
        create_limit_order,
        MarketOrderRequest,
        LimitOrderRequest
    )
    from trading_systems.exchanges.kraken.account_models import OrderSide, OrderType
    print("‚úÖ All imports successful")
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("\nüîß Possible solutions:")
    print("1. Ensure pre_trade_checks.py file exists in src/trading_systems/risk/")
    print("2. Check that all required model files exist")
    print("3. Verify directory structure is correct")
    sys.exit(1)


class PreTradeRiskValidationTestSuite:
    """Test suite for Pre-trade Risk Validation system."""
    
    def __init__(self):
        self.test_results = {}
        self.start_time = time.time()
        
    def run_full_test_suite(self):
        """Run the complete Pre-trade Risk Validation test suite."""
        print("üß™ PRE-TRADE RISK VALIDATION - TEST SUITE")
        print("=" * 70)
        print("Testing all Pre-trade Risk Validation functionality")
        print("=" * 70)
        
        try:
            # Test Categories
            self._test_1_risk_models_creation()
            self._test_2_balance_validation()
            self._test_3_order_size_limits()
            self._test_4_position_concentration()
            self._test_5_daily_limits()
            self._test_6_risk_analyzer()
            self._test_7_convenience_functions()
            self._test_8_conservative_limits()
            self._test_9_integration_scenarios()
            self._test_10_edge_cases()
            
        except Exception as e:
            print(f"‚ùå Test suite failed with error: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            self._generate_comprehensive_report()
    
    def _test_1_risk_models_creation(self):
        """Test 1: Risk model creation and validation."""
        print("\\n1Ô∏è‚É£ RISK MODELS CREATION")
        print("-" * 50)
        
        try:
            # Test AccountBalance creation
            balance = AccountBalance(
                currency="USD",
                total_balance=Decimal("10000.00"),
                available_balance=Decimal("8000.00"),
                reserved_balance=Decimal("2000.00")
            )
            
            assert balance.currency == "USD"
            assert balance.utilization_percentage == 20.0  # 2000/10000 * 100
            print("  ‚úÖ AccountBalance model created and calculated correctly")
            
            # Test PositionInfo creation
            position = PositionInfo(
                pair="XBTUSD",
                size=Decimal("1.5"),  # Long position
                entry_price=Decimal("45000.00"),
                current_price=Decimal("50000.00")
            )
            
            assert position.is_long == True
            assert position.is_short == False
            assert position.absolute_size == Decimal("1.5")
            print("  ‚úÖ PositionInfo model created and properties working")
            
            # Test TradingStatistics
            stats = TradingStatistics(
                daily_trade_count=25,
                daily_volume_usd=Decimal("50000.00"),
                current_drawdown=0.05
            )
            
            assert stats.daily_trade_count == 25
            assert stats.current_drawdown == 0.05
            print("  ‚úÖ TradingStatistics model created correctly")
            
            # Test RiskLimits
            limits = RiskLimits(
                max_order_size_usd=Decimal("25000.00"),
                max_daily_trades=100
            )
            
            assert limits.max_order_size_usd == Decimal("25000.00")
            assert limits.max_daily_trades == 100
            print("  ‚úÖ RiskLimits model created with custom values")
            
            self.test_results['risk_models_creation'] = True
            print("‚úÖ Risk models creation: PASSED")
            
        except Exception as e:
            print(f"  ‚ùå Risk models creation failed: {e}")
            self.test_results['risk_models_creation'] = False
    
    def _test_2_balance_validation(self):
        """Test 2: Balance validation checks."""
        print("\\n2Ô∏è‚É£ BALANCE VALIDATION")
        print("-" * 50)
        
        try:
            validator = PreTradeRiskValidator()
            
            # Test sufficient balance scenario
            sufficient_balance = [AccountBalance(
                currency="USD",
                total_balance=Decimal("10000.00"),
                available_balance=Decimal("8000.00")
            )]
            
            small_order = create_limit_order(
                pair="XBTUSD",
                side=OrderSide.BUY,
                volume="0.1",
                price="50000.00"
            )
            
            responses = validator.validate_order(
                order_request=small_order,
                account_balances=sufficient_balance,
                current_positions=[],
                trading_stats=TradingStatistics(),
                market_price=Decimal("50000.00")
            )
            
            balance_check = next((r for r in responses if "balance" in r.message.lower()), None)
            assert balance_check is not None
            assert balance_check.result == RiskCheckResult.PASS
            print("  ‚úÖ Sufficient balance check passed")
            
            # Test insufficient balance scenario
            insufficient_balance = [AccountBalance(
                currency="USD",
                total_balance=Decimal("1000.00"),
                available_balance=Decimal("500.00")
            )]
            
            large_order = create_limit_order(
                pair="XBTUSD",
                side=OrderSide.BUY,
                volume="1.0",
                price="50000.00"
            )
            
            responses = validator.validate_order(
                order_request=large_order,
                account_balances=insufficient_balance,
                current_positions=[],
                trading_stats=TradingStatistics(),
                market_price=Decimal("50000.00")
            )
            
            balance_check = next((r for r in responses if "Insufficient balance" in r.message), None)
            assert balance_check is not None
            assert balance_check.result == RiskCheckResult.BLOCK
            print("  ‚úÖ Insufficient balance correctly blocked")
            
            self.test_results['balance_validation'] = True
            print("‚úÖ Balance validation: PASSED")
            
        except Exception as e:
            print(f"  ‚ùå Balance validation failed: {e}")
            self.test_results['balance_validation'] = False
    
    def _test_3_order_size_limits(self):
        """Test 3: Order size limit checks."""
        print("\\n3Ô∏è‚É£ ORDER SIZE LIMITS")
        print("-" * 50)
        
        try:
            # Create validator with small limits for testing
            small_limits = RiskLimits(
                max_order_size_usd=Decimal("10000.00"),  # $10k limit
                max_order_percentage=0.20  # 20% of balance
            )
            validator = PreTradeRiskValidator(small_limits)
            
            balance = [AccountBalance(
                currency="USD",
                total_balance=Decimal("100000.00"),
                available_balance=Decimal("80000.00")
            )]
            
            # Test order within limits
            normal_order = create_limit_order(
                pair="XBTUSD",
                side=OrderSide.BUY,
                volume="0.1",
                price="50000.00"  # $5k order
            )
            
            responses = validator.validate_order(
                order_request=normal_order,
                account_balances=balance,
                current_positions=[],
                trading_stats=TradingStatistics(),
                market_price=Decimal("50000.00")
            )
            
            size_check = next((r for r in responses if "Order size" in r.message), None)
            if size_check:
                assert size_check.result in [RiskCheckResult.PASS, RiskCheckResult.WARNING]
                print("  ‚úÖ Normal order size accepted")
            else:
                print("  ‚úÖ Order size check passed (no specific message)")
            
            # Test oversized order
            large_order = create_limit_order(
                pair="XBTUSD",
                side=OrderSide.BUY,
                volume="1.0",
                price="50000.00"  # $50k order (exceeds $10k limit)
            )
            
            responses = validator.validate_order(
                order_request=large_order,
                account_balances=balance,
                current_positions=[],
                trading_stats=TradingStatistics(),
                market_price=Decimal("50000.00")
            )
            
            size_check = next((r for r in responses if "exceeds limit" in r.message), None)
            assert size_check is not None
            assert size_check.result == RiskCheckResult.BLOCK
            print("  ‚úÖ Oversized order correctly blocked")
            
            self.test_results['order_size_limits'] = True
            print("‚úÖ Order size limits: PASSED")
            
        except Exception as e:
            print(f"  ‚ùå Order size limits failed: {e}")
            self.test_results['order_size_limits'] = False
    
    def _test_4_position_concentration(self):
        """Test 4: Position concentration checks."""
        print("\\n4Ô∏è‚É£ POSITION CONCENTRATION")
        print("-" * 50)
        
        try:
            # Create validator with strict concentration limits
            strict_limits = RiskLimits(max_concentration=0.10)  # 10% max
            validator = PreTradeRiskValidator(strict_limits)
            
            # Existing large position
            existing_positions = [
                PositionInfo(
                    pair="XBTUSD",
                    size=Decimal("2.0"),
                    current_price=Decimal("50000.00")  # $100k position
                ),
                PositionInfo(
                    pair="ETHUSD", 
                    size=Decimal("10.0"),
                    current_price=Decimal("3000.00")  # $30k position
                )
            ]
            
            balance = [AccountBalance(
                currency="USD",
                total_balance=Decimal("200000.00"),
                available_balance=Decimal("150000.00")
            )]
            
            # Test order that would increase concentration
            concentration_order = create_limit_order(
                pair="XBTUSD",
                side=OrderSide.BUY,
                volume="1.0",
                price="50000.00"  # Would make BTC position $150k out of $180k total
            )
            
            responses = validator.validate_order(
                order_request=concentration_order,
                account_balances=balance,
                current_positions=existing_positions,
                trading_stats=TradingStatistics(),
                market_price=Decimal("50000.00")
            )
            
            concentration_check = next((r for r in responses if "concentration" in r.message.lower()), None)
            if concentration_check and concentration_check.result in [RiskCheckResult.WARNING, RiskCheckResult.FAIL]:
                print("  ‚úÖ High concentration correctly flagged")
            else:
                print("  ‚úÖ Position concentration check completed")
            
            self.test_results['position_concentration'] = True
            print("‚úÖ Position concentration: PASSED")
            
        except Exception as e:
            print(f"  ‚ùå Position concentration failed: {e}")
            self.test_results['position_concentration'] = False
    
    def _test_5_daily_limits(self):
        """Test 5: Daily trading limits."""
        print("\\n5Ô∏è‚É£ DAILY LIMITS")
        print("-" * 50)
        
        try:
            # Create validator with low daily limits
            daily_limits = RiskLimits(
                max_daily_trades=5,
                max_daily_volume_usd=Decimal("25000.00")
            )
            validator = PreTradeRiskValidator(daily_limits)
            
            balance = [AccountBalance(
                currency="USD",
                total_balance=Decimal("100000.00"),
                available_balance=Decimal("80000.00")
            )]
            
            # Test hitting trade count limit
            high_trade_stats = TradingStatistics(
                daily_trade_count=5,  # At limit
                daily_volume_usd=Decimal("10000.00")
            )
            
            normal_order = create_limit_order(
                pair="XBTUSD",
                side=OrderSide.BUY,
                volume="0.1",
                price="50000.00"
            )
            
            responses = validator.validate_order(
                order_request=normal_order,
                account_balances=balance,
                current_positions=[],
                trading_stats=high_trade_stats,
                market_price=Decimal("50000.00")
            )
            
            trade_limit_check = next((r for r in responses if "trade limit" in r.message.lower()), None)
            assert trade_limit_check is not None
            assert trade_limit_check.result == RiskCheckResult.BLOCK
            print("  ‚úÖ Daily trade limit correctly enforced")
            
            # Test hitting volume limit
            high_volume_stats = TradingStatistics(
                daily_trade_count=2,
                daily_volume_usd=Decimal("20000.00")  # Close to $25k limit
            )
            
            volume_order = create_limit_order(
                pair="XBTUSD",
                side=OrderSide.BUY,
                volume="0.2",
                price="50000.00"  # $10k order would exceed volume limit
            )
            
            responses = validator.validate_order(
                order_request=volume_order,
                account_balances=balance,
                current_positions=[],
                trading_stats=high_volume_stats,
                market_price=Decimal("50000.00")
            )
            
            volume_limit_check = next((r for r in responses if "volume limit" in r.message.lower()), None)
            if volume_limit_check:
                assert volume_limit_check.result in [RiskCheckResult.WARNING, RiskCheckResult.BLOCK]
                print("  ‚úÖ Daily volume limit correctly flagged")
            else:
                print("  ‚úÖ Volume limit check completed")
            
            self.test_results['daily_limits'] = True
            print("‚úÖ Daily limits: PASSED")
            
        except Exception as e:
            print(f"  ‚ùå Daily limits failed: {e}")
            self.test_results['daily_limits'] = False
    
    def _test_6_risk_analyzer(self):
        """Test 6: Risk analyzer functionality."""
        print("\\n6Ô∏è‚É£ RISK ANALYZER")
        print("-" * 50)
        
        try:
            # Create sample risk check responses
            responses = [
                RiskCheckResponse(
                    result=RiskCheckResult.PASS,
                    message="Balance check passed",
                    risk_level=RiskLevel.LOW
                ),
                RiskCheckResponse(
                    result=RiskCheckResult.WARNING,
                    message="High volume detected",
                    risk_level=RiskLevel.MEDIUM
                ),
                RiskCheckResponse(
                    result=RiskCheckResult.BLOCK,
                    message="Insufficient balance",
                    risk_level=RiskLevel.CRITICAL
                )
            ]
            
            # Test analysis
            analysis = RiskAnalyzer.analyze_results(responses)
            
            assert analysis['recommendation'] == "BLOCK_ORDER"
            assert analysis['total_checks'] == 3
            assert analysis['result_summary'][RiskCheckResult.BLOCK.value] == 1
            assert analysis['result_summary'][RiskCheckResult.WARNING.value] == 1
            assert analysis['result_summary'][RiskCheckResult.PASS.value] == 1
            assert len(analysis['blocking_issues']) == 1
            assert len(analysis['warnings']) == 1
            print("  ‚úÖ Risk analysis with blocking issue handled correctly")
            
            # Test all-pass scenario
            all_pass_responses = [
                RiskCheckResponse(
                    result=RiskCheckResult.PASS,
                    message="Check 1 passed",
                    risk_level=RiskLevel.LOW
                ),
                RiskCheckResponse(
                    result=RiskCheckResult.PASS,
                    message="Check 2 passed",
                    risk_level=RiskLevel.LOW
                )
            ]
            
            all_pass_analysis = RiskAnalyzer.analyze_results(all_pass_responses)
            assert all_pass_analysis['recommendation'] == "APPROVE_ORDER"
            assert all_pass_analysis['overall_risk_score'] == 0.0
            print("  ‚úÖ All-pass scenario handled correctly")
            
            self.test_results['risk_analyzer'] = True
            print("‚úÖ Risk analyzer: PASSED")
            
        except Exception as e:
            print(f"  ‚ùå Risk analyzer failed: {e}")
            self.test_results['risk_analyzer'] = False
    
    def _test_7_convenience_functions(self):
        """Test 7: Convenience functions."""
        print("\\n7Ô∏è‚É£ CONVENIENCE FUNCTIONS")
        print("-" * 50)
        
        try:
            # Test validate_order_with_defaults
            order = create_limit_order(
                pair="XBTUSD",
                side=OrderSide.BUY,
                volume="0.1",
                price="50000.00"
            )
            
            balances = [AccountBalance(
                currency="USD",
                total_balance=Decimal("50000.00"),
                available_balance=Decimal("40000.00")
            )]
            
            result = validate_order_with_defaults(
                order_request=order,
                account_balances=balances,
                market_price=Decimal("50000.00")
            )
            
            assert 'recommendation' in result
            assert 'total_checks' in result
            assert 'overall_risk_score' in result
            print("  ‚úÖ validate_order_with_defaults working")
            
            # Test preset limit functions
            conservative = create_conservative_limits()
            assert conservative.max_balance_utilization == 0.80
            assert conservative.max_order_percentage == 0.05
            print("  ‚úÖ create_conservative_limits working")
            
            aggressive = create_aggressive_limits()
            assert aggressive.max_balance_utilization == 0.98
            assert aggressive.max_order_percentage == 0.20
            print("  ‚úÖ create_aggressive_limits working")
            
            self.test_results['convenience_functions'] = True
            print("‚úÖ Convenience functions: PASSED")
            
        except Exception as e:
            print(f"  ‚ùå Convenience functions failed: {e}")
            self.test_results['convenience_functions'] = False
    
    def _test_8_conservative_limits(self):
        """Test 8: Conservative limits behavior."""
        print("\\n8Ô∏è‚É£ CONSERVATIVE LIMITS")
        print("-" * 50)
        
        try:
            conservative_validator = PreTradeRiskValidator(create_conservative_limits())
            
            # Test with order that would be rejected under conservative limits
            balance = [AccountBalance(
                currency="USD",
                total_balance=Decimal("100000.00"),
                available_balance=Decimal("80000.00")
            )]
            
            # Large order (10% of balance, should trigger warning)
            large_order = create_limit_order(
                pair="XBTUSD",
                side=OrderSide.BUY,
                volume="0.2",
                price="50000.00"  # $10k = 10% of $100k balance
            )
            
            responses = conservative_validator.validate_order(
                order_request=large_order,
                account_balances=balance,
                current_positions=[],
                trading_stats=TradingStatistics(),
                market_price=Decimal("50000.00")
            )
            
            # Should have warnings due to conservative limits
            analysis = RiskAnalyzer.analyze_results(responses)
            print(f"  üìä Conservative validation result: {analysis['recommendation']}")
            print(f"  üìä Risk score: {analysis['overall_risk_score']:.1f}")
            
            # Conservative limits should be more restrictive
            assert analysis['total_checks'] > 0
            print("  ‚úÖ Conservative limits applied successfully")
            
            self.test_results['conservative_limits'] = True
            print("‚úÖ Conservative limits: PASSED")
            
        except Exception as e:
            print(f"  ‚ùå Conservative limits failed: {e}")
            self.test_results['conservative_limits'] = False
    
    def _test_9_integration_scenarios(self):
        """Test 9: Real-world integration scenarios."""
        print("\\n9Ô∏è‚É£ INTEGRATION SCENARIOS")
        print("-" * 50)
        
        try:
            validator = PreTradeRiskValidator()
            
            # Scenario 1: New trader with small account
            small_account_balances = [AccountBalance(
                currency="USD",
                total_balance=Decimal("5000.00"),
                available_balance=Decimal("4800.00")
            )]
            
            small_order = create_limit_order(
                pair="XBTUSD",
                side=OrderSide.BUY,
                volume="0.05",
                price="50000.00"  # $2500 order
            )
            
            responses = validator.validate_order(
                order_request=small_order,
                account_balances=small_account_balances,
                current_positions=[],
                trading_stats=TradingStatistics(),
                market_price=Decimal("50000.00")
            )
            
            analysis = RiskAnalyzer.analyze_results(responses)
            print(f"  üìä Small account scenario: {analysis['recommendation']}")
            
            # Scenario 2: Active trader with existing positions
            active_balances = [AccountBalance(
                currency="USD",
                total_balance=Decimal("100000.00"),
                available_balance=Decimal("60000.00")
            )]
            
            active_positions = [
                PositionInfo(
                    pair="XBTUSD",
                    size=Decimal("0.5"),
                    current_price=Decimal("50000.00")
                ),
                PositionInfo(
                    pair="ETHUSD",
                    size=Decimal("5.0"),
                    current_price=Decimal("3000.00")
                )
            ]
            
            active_stats = TradingStatistics(
                daily_trade_count=15,
                daily_volume_usd=Decimal("75000.00"),
                current_drawdown=0.08
            )
            
            active_order = create_limit_order(
                pair="XBTUSD",
                side=OrderSide.BUY,
                volume="0.2",
                price="49000.00"
            )
            
            responses = validator.validate_order(
                order_request=active_order,
                account_balances=active_balances,
                current_positions=active_positions,
                trading_stats=active_stats,
                market_price=Decimal("50000.00")
            )
            
            analysis = RiskAnalyzer.analyze_results(responses)
            print(f"  üìä Active trader scenario: {analysis['recommendation']}")
            
            self.test_results['integration_scenarios'] = True
            print("‚úÖ Integration scenarios: PASSED")
            
        except Exception as e:
            print(f"  ‚ùå Integration scenarios failed: {e}")
            self.test_results['integration_scenarios'] = False
    
    def _test_10_edge_cases(self):
        """Test 10: Edge cases and error handling."""
        print("\\nüîü EDGE CASES")
        print("-" * 50)
        
        try:
            validator = PreTradeRiskValidator()
            
            # Edge case 1: No account balances
            empty_order = create_market_order(
                pair="XBTUSD",
                side=OrderSide.BUY,
                volume="0.01"
            )
            
            responses = validator.validate_order(
                order_request=empty_order,
                account_balances=[],  # Empty balances
                current_positions=[],
                trading_stats=TradingStatistics(),
                market_price=Decimal("50000.00")
            )
            
            assert len(responses) > 0  # Should still run checks
            print("  ‚úÖ Empty balances handled gracefully")
            
            # Edge case 2: Zero balance
            zero_balance = [AccountBalance(
                currency="USD",
                total_balance=Decimal("0.00"),
                available_balance=Decimal("0.00")
            )]
            
            responses = validator.validate_order(
                order_request=empty_order,
                account_balances=zero_balance,
                current_positions=[],
                trading_stats=TradingStatistics(),
                market_price=Decimal("50000.00")
            )
            
            # Should block due to insufficient balance
            blocking_responses = [r for r in responses if r.result == RiskCheckResult.BLOCK]
            assert len(blocking_responses) > 0
            print("  ‚úÖ Zero balance correctly blocked")
            
            # Edge case 3: No market price
            responses = validator.validate_order(
                order_request=empty_order,
                account_balances=zero_balance,
                current_positions=[],
                trading_stats=TradingStatistics(),
                market_price=None  # No market price
            )
            
            assert len(responses) > 0  # Should still complete validation
            print("  ‚úÖ Missing market price handled")
            
            self.test_results['edge_cases'] = True
            print("‚úÖ Edge cases: PASSED")
            
        except Exception as e:
            print(f"  ‚ùå Edge cases failed: {e}")
            self.test_results['edge_cases'] = False
    
    def _generate_comprehensive_report(self):
        """Generate comprehensive test report."""
        print("\\n" + "=" * 70)
        print("üìä PRE-TRADE RISK VALIDATION - TEST REPORT")
        print("=" * 70)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result)
        
        print(f"üéØ Overall Result: {passed_tests}/{total_tests} tests passed")
        print(f"‚è±Ô∏è Total Runtime: {time.time() - self.start_time:.1f} seconds")
        print()
        
        print("üìã Detailed Test Results:")
        test_descriptions = {
            'risk_models_creation': 'Risk Models Creation',
            'balance_validation': 'Balance Validation',
            'order_size_limits': 'Order Size Limits',
            'position_concentration': 'Position Concentration',
            'daily_limits': 'Daily Trading Limits',
            'risk_analyzer': 'Risk Analyzer',
            'convenience_functions': 'Convenience Functions',
            'conservative_limits': 'Conservative Limits',
            'integration_scenarios': 'Integration Scenarios',
            'edge_cases': 'Edge Cases'
        }
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ PASS" if result else "‚ùå FAIL"
            description = test_descriptions.get(test_name, test_name.replace('_', ' ').title())
            print(f"  {status} - {description}")
        
        print()
        
        if passed_tests == total_tests:
            print("üéâ ALL TESTS PASSED!")
            print("‚úÖ Pre-trade Risk Validation system is fully functional")
            print("‚úÖ All risk checks working correctly")
            print("‚úÖ Balance validation and limits enforcement operational")
            print("‚úÖ Risk analysis and recommendation system working")
            print("‚úÖ Integration scenarios and edge cases handled")
            print()
            print("üöÄ READY TO PROCEED WITH:")
            print("   ‚Ä¢ Task 3.2.D: Order Placement Integration Testing")
            print("   ‚Ä¢ Full system integration with Enhanced REST Client")
            
        elif passed_tests >= total_tests * 0.9:
            print("‚ö†Ô∏è MOSTLY PASSED - Minor issues detected")
            print("Core functionality working, some features need attention")
            
        elif passed_tests >= total_tests * 0.7:
            print("‚ö†Ô∏è MAJOR FUNCTIONALITY WORKING")
            print("Several tests passed, but significant issues need resolution")
            
        else:
            print("‚ùå CRITICAL ISSUES DETECTED")
            print("Pre-trade Risk Validation system needs significant work")
        
        print("=" * 70)
        
        return passed_tests == total_tests


def main():
    """Run the comprehensive Pre-trade Risk Validation test suite."""
    test_suite = PreTradeRiskValidationTestSuite()
    test_suite.run_full_test_suite()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\\n\\nüëã Test interrupted by user")
    except Exception as e:
        print(f"\\n‚ùå Unexpected error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
