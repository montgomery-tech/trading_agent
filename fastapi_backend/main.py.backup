#!/usr/bin/env python3
"""
Balance Tracking System - FastAPI Backend
Updated main application with JWT authentication support and Task 1.3 Security Framework
"""

from fastapi import FastAPI, HTTPException, status, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
from datetime import datetime
import logging

from api.config import settings
from api.database import DatabaseManager
from api.routes import users, transactions, balances, currencies

from api.auth_routes import router as auth_router
from api.routes import admin

from api.security import (
    create_security_middleware_stack,
    security_exception_handler,
    EnhancedErrorResponse
)

from api.security.redis_rate_limiting_backend import cleanup_redis_backend

# Setup logging
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan manager with Redis integration"""
    logger.info("üöÄ Starting Balance Tracking API...")

    # Initialize database
    db = DatabaseManager(settings.DATABASE_URL)
    try:
        db.connect()
        app.state.database = db
        logger.info("‚úÖ Database initialized")
    except Exception as e:
        logger.error(f"‚ùå Database initialization failed: {e}")
        raise

    # Initialize Redis backend for rate limiting
    try:
        from api.security.enhanced_rate_limiting_service import rate_limiting_service
        await rate_limiting_service.initialize_redis()
        logger.info("‚úÖ Redis rate limiting backend initialized")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Redis initialization failed, using fallback: {e}")

    # Log production readiness status
    logger.info("üè≠ Production Configuration Status:")
    logger.info(f"   ‚Ä¢ Environment: {settings.ENVIRONMENT}")
    logger.info(f"   ‚Ä¢ Database: {settings.DATABASE_TYPE}")
    logger.info(f"   ‚Ä¢ JWT Authentication: {'Enabled' if hasattr(settings, 'SECRET_KEY') else 'Disabled'}")
    logger.info(f"   ‚Ä¢ Rate Limiting: {'Enabled' if getattr(settings, 'RATE_LIMIT_ENABLED', True) else 'Disabled'}")
    logger.info(f"   ‚Ä¢ Redis Backend: {'Configured' if hasattr(settings, 'RATE_LIMIT_REDIS_URL') else 'Not Configured'}")
    logger.info(f"   ‚Ä¢ Max request size: {getattr(settings, 'MAX_REQUEST_SIZE', 10485760) / 1024 / 1024:.1f}MB")
    logger.info(f"   ‚Ä¢ Request timeout: {getattr(settings, 'REQUEST_TIMEOUT', 30)}s")
    logger.info(f"   ‚Ä¢ Input validation: Enabled")
    logger.info(f"   ‚Ä¢ Security headers: Enabled")

    yield

    # Cleanup
    logger.info("üõë Shutting down...")

    # Cleanup Redis connections
    try:
        await cleanup_redis_backend()
        logger.info("‚úÖ Redis backend cleaned up")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Redis cleanup warning: {e}")

    # Cleanup database
    if hasattr(app.state, 'database'):
        app.state.database.disconnect()
        logger.info("‚úÖ Database disconnected")


# Create FastAPI app
app = FastAPI(
    title=settings.PROJECT_NAME,
    description="REST API for managing user balances, transactions, and trading with JWT authentication and comprehensive security",
    version=settings.VERSION,
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# NEW: Apply Task 1.3 Security Middleware Stack FIRST (before CORS)
app = create_security_middleware_stack(app)

# Add CORS middleware with secure settings (after security middleware)
cors_origins = getattr(settings, 'CORS_ORIGINS', ["http://localhost:3000"])
app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH"],
    allow_headers=["*"],
)

# NEW: Add enhanced exception handlers
app.add_exception_handler(HTTPException, security_exception_handler)

# Include authentication routes (from Task 1.2)
app.include_router(
    auth_router,
    prefix=f"{settings.API_V1_PREFIX}/auth",
    tags=["Authentication"]
)

# Include admin routes
app.include_router(admin.router)
# Include existing API routes
app.include_router(
    users.router,
    prefix=f"{settings.API_V1_PREFIX}/users",
    tags=["Users"]
)

app.include_router(
    transactions.router,
    prefix=f"{settings.API_V1_PREFIX}/transactions",
    tags=["Transactions"]
)

app.include_router(
    balances.router,
    prefix=f"{settings.API_V1_PREFIX}/balances",
    tags=["Balances"]
)

app.include_router(
    currencies.router,
    prefix=f"{settings.API_V1_PREFIX}/currencies",
    tags=["Currencies"]
)

# Root endpoints
@app.get("/")
async def root():
    """API root endpoint with authentication and security info"""
    return {
        "message": f"{settings.PROJECT_NAME} API",
        "version": settings.VERSION,
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "authentication": "JWT Bearer Token",
        "security": {
            "input_validation": "enabled",
            "rate_limiting": "enabled" if getattr(settings, 'RATE_LIMIT_ENABLED', True) else "disabled",
            "security_headers": "enabled",
            "request_size_limit": f"{getattr(settings, 'MAX_REQUEST_SIZE', 10485760) / 1024 / 1024:.1f}MB"
        },
        "documentation": "/docs",
        "endpoints": {
            "health": "/health",
            "authentication": f"{settings.API_V1_PREFIX}/auth",
            "admin": f"{settings.API_V1_PREFIX}/admin",
            "users": f"{settings.API_V1_PREFIX}/users",
            "balances": f"{settings.API_V1_PREFIX}/balances",
            "transactions": f"{settings.API_V1_PREFIX}/transactions",
            "currencies": f"{settings.API_V1_PREFIX}/currencies"
        },
        "auth_endpoints": {
            "register": f"{settings.API_V1_PREFIX}/auth/register",
            "login": f"{settings.API_V1_PREFIX}/auth/login",
            "refresh": f"{settings.API_V1_PREFIX}/auth/refresh",
            "logout": f"{settings.API_V1_PREFIX}/auth/logout",
            "profile": f"{settings.API_V1_PREFIX}/auth/me",
            "change_password": f"{settings.API_V1_PREFIX}/auth/change-password"
        }
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "version": settings.VERSION
    }

# Server startup
if __name__ == "__main__":
    import uvicorn
    logger.info("üöÄ Starting Balance Tracking API...")
    logger.info(f"   ‚Ä¢ Environment: {settings.ENVIRONMENT}")
    logger.info(f"   ‚Ä¢ Debug mode: {settings.DEBUG}")
    logger.info(f"   ‚Ä¢ Database: {settings.DATABASE_TYPE}")
    logger.info(f"   ‚Ä¢ JWT Authentication: {'Enabled' if hasattr(settings, 'SECRET_KEY') else 'Disabled'}")
    logger.info(f"   ‚Ä¢ Rate Limiting: {'Enabled' if getattr(settings, 'RATE_LIMIT_ENABLED', True) else 'Disabled'}")
    logger.info(f"   ‚Ä¢ Security headers: Enabled")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
