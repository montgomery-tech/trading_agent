#!/usr/bin/env python3
"""
api/routes/trades.py
Trade execution and management routes with Kraken API integration
"""

from fastapi import APIRouter, HTTPException, status, Depends
from typing import Optional, List
from decimal import Decimal
from datetime import datetime
import logging
import os

from api.models import (
    TradeRequest, TradeResponse, TradeSimulationRequest, TradeSimulationResponse,
    TradeHistoryResponse, DataResponse, ListResponse
)
from api.dependencies import get_database, get_pagination_params
from api.database import DatabaseManager
from api.services.kraken_integrated_trade_service import KrakenIntegratedTradeService

logger = logging.getLogger(__name__)
router = APIRouter()


def get_trade_service(db: DatabaseManager = Depends(get_database)) -> KrakenIntegratedTradeService:
    """Dependency to get Kraken-integrated trade service instance"""
    return KrakenIntegratedTradeService(db)


@router.post("/execute", response_model=TradeResponse)
async def execute_trade(
    trade_request: TradeRequest,
    trade_service: KrakenIntegratedTradeService = Depends(get_trade_service)
):
    """
    Execute a market order with Kraken API integration

    This endpoint:
    1. Validates the trade request
    2. Executes the order on Kraken (if live trading enabled)
    3. Applies spread markup to the execution price
    4. Updates local database with marked-up trade details
    5. Returns marked-up response to client

    Args:
        trade_request: Trade execution request
        trade_service: Kraken-integrated trade service dependency

    Returns:
        Trade execution response with marked-up details
    """
    try:
        # Validate order type (only market orders supported)
        if trade_request.order_type.lower() != "market":
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Only market orders are supported. Set order_type to 'market'."
            )

        # Log trade request
        live_trading = os.getenv("ENABLE_LIVE_TRADING", "false").lower() == "true"
        mode = "LIVE" if live_trading else "SANDBOX"

        logger.info(f"[{mode}] Executing market order: {trade_request.side.value} "
                   f"{trade_request.amount} {trade_request.symbol} for user {trade_request.username}")

        # Execute the trade
        trade_response = await trade_service.execute_trade(trade_request)

        logger.info(f"[{mode}] Trade executed successfully: {trade_response.trade_id}")
        return trade_response

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Trade execution failed: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Trade execution failed: {str(e)}"
        )


@router.post("/simulate", response_model=TradeSimulationResponse)
async def simulate_trade(
    simulation_request: TradeSimulationRequest,
    trade_service: KrakenIntegratedTradeService = Depends(get_trade_service)
):
    """
    Simulate a trade execution with real-time Kraken prices

    This endpoint provides trade simulation using actual Kraken market prices
    but without executing any real orders.
    """
    try:
        logger.info(f"Simulating trade: {simulation_request.side.value} "
                   f"{simulation_request.amount} {simulation_request.symbol}")

        # Get real-time simulation using Kraken prices
        simulation_result = await trade_service.simulate_trade(simulation_request)

        return TradeSimulationResponse(
            success=True,
            message=f"Trade simulation completed for {simulation_request.side.value} "
                   f"{simulation_request.amount} {simulation_request.symbol}",
            symbol=simulation_request.symbol,
            side=simulation_request.side.value,
            amount=simulation_result.get('amount', simulation_request.amount),
            estimated_price=simulation_result.get('estimated_price', Decimal('0')),
            estimated_total=simulation_result.get('estimated_total', Decimal('0')),
            estimated_fee=simulation_result.get('estimated_fee', Decimal('0')),
            fee_currency=simulation_result.get('fee_currency', 'USD'),
            current_balances=simulation_result.get('current_balances', {}),
            projected_balances=simulation_result.get('projected_balances', {}),
            validation_errors=simulation_result.get('validation_errors', []),
            warnings=simulation_result.get('warnings', [])
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Trade simulation failed: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Trade simulation failed: {str(e)}"
        )


@router.get("/user/{username}", response_model=ListResponse)
async def get_user_trades(
    username: str,
    limit: int = 50,
    offset: int = 0,
    symbol: Optional[str] = None,
    side: Optional[str] = None,
    status: Optional[str] = None,
    pagination: dict = Depends(get_pagination_params),
    db: DatabaseManager = Depends(get_database)
):
    """
    Get trade history for a user including Kraken execution details

    Enhanced to show both client prices and actual Kraken execution prices
    for transparency (admin view) or just client prices (user view).
    """
    try:
        # First get user ID
        user_query = "SELECT id FROM users WHERE username = ?"
        user_results = db.execute_query(user_query, (username,))

        if not user_results:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"User '{username}' not found"
            )

        user_id = user_results[0]['id']

        # Build enhanced query with Kraken fields
        query = """
            SELECT t.id, t.side, t.amount, t.price, t.total_value, t.fee_amount,
                   t.fee_currency_code, t.status, t.executed_at, t.created_at,
                   t.execution_price, t.spread_amount, t.kraken_order_ids,
                   tp.symbol, tp.base_currency, tp.quote_currency
            FROM trades t
            JOIN trading_pairs tp ON t.trading_pair_id = tp.id
            WHERE t.user_id = ?
        """
        params = [user_id]

        # Add optional filters
        if symbol:
            query += " AND tp.symbol = ?"
            params.append(symbol.upper())

        if side:
            query += " AND t.side = ?"
            params.append(side.lower())

        if status:
            query += " AND t.status = ?"
            params.append(status.lower())

        query += " ORDER BY t.executed_at DESC"

        # Add pagination
        if limit:
            query += " LIMIT ?"
            params.append(limit)

        if offset:
            query += " OFFSET ?"
            params.append(offset)

        results = db.execute_query(query, params)

        # Format trade history with enhanced details
        trades = []
        for row in results:
            trade = {
                "trade_id": row['id'],
                "symbol": row['symbol'],
                "side": row['side'],
                "amount": str(row['amount']),
                "client_price": str(row['price']),  # Price client sees
                "total_value": str(row['total_value']),
                "fee_amount": str(row['fee_amount']),
                "fee_currency": row['fee_currency_code'],
                "status": row['status'],
                "executed_at": row['executed_at'],
                "created_at": row['created_at']
            }

            # Add Kraken execution details if available
            if row.get('execution_price'):
                trade["kraken_execution"] = {
                    "execution_price": str(row['execution_price']),
                    "spread_amount": str(row['spread_amount']) if row.get('spread_amount') else "0",
                    "order_ids": row['kraken_order_ids'].split(',') if row.get('kraken_order_ids') else []
                }

            trades.append(trade)

        return ListResponse(
            message=f"Retrieved {len(trades)} trades for user {username}",
            data=trades,
            total=len(trades),
            limit=limit,
            offset=offset
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Failed to get user trades: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to retrieve trades: {str(e)}"
        )


@router.get("/kraken/status", response_model=DataResponse)
async def get_kraken_status(
    trade_service: KrakenIntegratedTradeService = Depends(get_trade_service)
):
    """
    Get Kraken API connection status and configuration

    Returns information about Kraken integration status and settings.
    """
    try:
        client = await trade_service._get_kraken_client()

        # Test connection
        is_connected = await client.validate_connection()

        # Get basic info
        live_trading = os.getenv("ENABLE_LIVE_TRADING", "false").lower() == "true"
        has_credentials = bool(client.api_key and client.api_secret)

        status_info = {
            "kraken_connection": "connected" if is_connected else "disconnected",
            "live_trading_enabled": live_trading,
            "credentials_configured": has_credentials,
            "supported_symbols": list(client.symbol_mapping.keys()),
            "kraken_pairs": list(client.symbol_mapping.values()),
            "api_base_url": client.base_url,
            "timeout_seconds": client.timeout
        }

        # Get account balance if connected and credentials available
        if is_connected and has_credentials and live_trading:
            try:
                balance = await client.get_account_balance()
                status_info["account_balance"] = {k: str(v) for k, v in balance.items()}
            except Exception as e:
                status_info["balance_error"] = str(e)

        return DataResponse(
            success=True,
            message="Kraken status retrieved successfully",
            data=status_info
        )

    except Exception as e:
        logger.error(f"Failed to get Kraken status: {e}")
        return DataResponse(
            success=False,
            message=f"Failed to get Kraken status: {str(e)}",
            data={
                "kraken_connection": "error",
                "error": str(e)
            }
        )


@router.get("/pricing/{symbol}", response_model=DataResponse)
async def get_real_time_pricing(
    symbol: str,
    trade_service: KrakenIntegratedTradeService = Depends(get_trade_service)
):
    """
    Get real-time pricing information from Kraken for a trading pair

    Returns current bid, ask, last price, and spread information.
    """
    try:
        client = await trade_service._get_kraken_client()

        # Get ticker information
        ticker_info = await client.get_ticker_info(symbol)

        # Calculate spread percentage
        bid = Decimal(str(ticker_info["bid"]))
        ask = Decimal(str(ticker_info["ask"]))
        spread_pct = ((ask - bid) / bid * 100) if bid > 0 else Decimal('0')

        pricing_data = {
            "symbol": symbol,
            "bid": str(ticker_info["bid"]),
            "ask": str(ticker_info["ask"]),
            "last": str(ticker_info["last"]),
            "market_spread_percentage": str(spread_pct.quantize(Decimal('0.01'))),
            "volume_24h": str(ticker_info["volume"]),
            "vwap_24h": str(ticker_info["vwap"]),
            "high_24h": str(ticker_info["high"]),
            "low_24h": str(ticker_info["low"]),
            "trades_count": ticker_info["trades"],
            "timestamp": ticker_info["timestamp"].isoformat(),
            "kraken_pair": ticker_info["kraken_pair"]
        }

        return DataResponse(
            success=True,
            message=f"Real-time pricing for {symbol} retrieved successfully",
            data=pricing_data
        )

    except Exception as e:
        logger.error(f"Failed to get pricing for {symbol}: {e}")
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=f"Failed to get pricing for {symbol}: {str(e)}"
        )
