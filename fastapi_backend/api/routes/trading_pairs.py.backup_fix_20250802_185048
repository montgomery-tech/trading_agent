#!/usr/bin/env python3
"""
api/routes/trading_pairs.py
Trading pairs management routes - Basic CRUD operations
"""

from fastapi import APIRouter, HTTPException, status, Depends
from typing import Optional, List, Dict, Any
from datetime import datetime
import logging

from api.models import DataResponse, ListResponse
from api.dependencies import get_database
from api.database import DatabaseManager

logger = logging.getLogger(__name__)
router = APIRouter()

@router.get("/", response_model=ListResponse, include_in_schema=True)
@router.get("", response_model=ListResponse, include_in_schema=False)
async def list_trading_pairs(
    active_only: bool = True,
    db: DatabaseManager = Depends(get_database)
):
    """List all available trading pairs"""
    try:
        # Build query with proper database compatibility
        if hasattr(db, 'db_type') and db.db_type == "postgresql":
            query = """
                SELECT tp.id, tp.symbol, tp.base_currency, tp.quote_currency,
                       tp.min_trade_amount, tp.max_trade_amount, tp.price_precision,
                       tp.amount_precision, tp.is_active, tp.created_at, tp.updated_at,
                       bc.name as base_currency_name, bc.symbol as base_currency_symbol,
                       qc.name as quote_currency_name, qc.symbol as quote_currency_symbol,
                       bc.is_fiat as base_is_fiat, qc.is_fiat as quote_is_fiat
                FROM trading_pairs tp
                LEFT JOIN currencies bc ON tp.base_currency = bc.code
                LEFT JOIN currencies qc ON tp.quote_currency = qc.code
            """
            conditions = []
            if active_only:
                conditions.append("tp.is_active = true")

            if conditions:
                query += " WHERE " + " AND ".join(conditions)

            query += " ORDER BY tp.symbol"
        else:
            # SQLite query
            query = """
                SELECT tp.id, tp.symbol, tp.base_currency, tp.quote_currency,
                       tp.min_trade_amount, tp.max_trade_amount, tp.price_precision,
                       tp.amount_precision, tp.is_active, tp.created_at, tp.updated_at,
                       bc.name as base_currency_name, bc.symbol as base_currency_symbol,
                       qc.name as quote_currency_name, qc.symbol as quote_currency_symbol,
                       bc.is_fiat as base_is_fiat, qc.is_fiat as quote_is_fiat
                FROM trading_pairs tp
                LEFT JOIN currencies bc ON tp.base_currency = bc.code
                LEFT JOIN currencies qc ON tp.quote_currency = qc.code
            """
            conditions = []
            if active_only:
                conditions.append("tp.is_active = 1")

            if conditions:
                query += " WHERE " + " AND ".join(conditions)

            query += " ORDER BY tp.symbol"

        results = db.execute_query(query, [])

        # If no data in database, return mock data for testing
        if not results:
            mock_trading_pairs = [
                {
                    "id": "mock-1",
                    "symbol": "BTC/USD",
                    "base_currency": "BTC",
                    "quote_currency": "USD",
                    "base_currency_name": "Bitcoin",
                    "quote_currency_name": "US Dollar",
                    "base_currency_symbol": "₿",
                    "quote_currency_symbol": "$",
                    "base_is_fiat": False,
                    "quote_is_fiat": True,
                    "is_active": True,
                    "min_trade_amount": "0.001",
                    "max_trade_amount": "100.0",
                    "price_precision": 2,
                    "amount_precision": 8,
                    "created_at": "2024-01-01T00:00:00Z",
                    "updated_at": "2024-01-01T00:00:00Z"
                },
                {
                    "id": "mock-2",
                    "symbol": "ETH/USD",
                    "base_currency": "ETH",
                    "quote_currency": "USD",
                    "base_currency_name": "Ethereum",
                    "quote_currency_name": "US Dollar",
                    "base_currency_symbol": "Ξ",
                    "quote_currency_symbol": "$",
                    "base_is_fiat": False,
                    "quote_is_fiat": True,
                    "is_active": True,
                    "min_trade_amount": "0.01",
                    "max_trade_amount": "1000.0",
                    "price_precision": 2,
                    "amount_precision": 6,
                    "created_at": "2024-01-01T00:00:00Z",
                    "updated_at": "2024-01-01T00:00:00Z"
                }
            ]

            return ListResponse(
                success=True,
                message=f"Retrieved {len(mock_trading_pairs)} trading pairs (mock data)",
                data=mock_trading_pairs
            )

        # Format the response data
        formatted_pairs = []
        for pair in results:
            formatted_pair = {
                "id": pair['id'],
                "symbol": pair['symbol'],
                "base_currency": {
                    "code": pair['base_currency'],
                    "name": pair.get('base_currency_name', pair['base_currency']),
                    "symbol": pair.get('base_currency_symbol', ''),
                    "is_fiat": pair.get('base_is_fiat', False)
                },
                "quote_currency": {
                    "code": pair['quote_currency'],
                    "name": pair.get('quote_currency_name', pair['quote_currency']),
                    "symbol": pair.get('quote_currency_symbol', ''),
                    "is_fiat": pair.get('quote_is_fiat', True)
                },
                "min_trade_amount": float(pair['min_trade_amount']) if pair['min_trade_amount'] else None,
                "max_trade_amount": float(pair['max_trade_amount']) if pair['max_trade_amount'] else None,
                "price_precision": pair['price_precision'],
                "amount_precision": pair['amount_precision'],
                "is_active": pair['is_active'],
                "created_at": pair['created_at'],
                "updated_at": pair['updated_at']
            }
            formatted_pairs.append(formatted_pair)

        return ListResponse(
            success=True,
            message=f"Retrieved {len(formatted_pairs)} trading pairs",
            data=formatted_pairs
        )

    except Exception as e:
        logger.error(f"Error listing trading pairs: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error retrieving trading pairs: {str(e)}"
        )


@router.get("/{symbol}", response_model=DataResponse)
async def get_trading_pair(
    symbol: str,
    db: DatabaseManager = Depends(get_database)
):
    """Get specific trading pair details by symbol"""
    try:
        # Normalize the symbol - handle both BTC/USD and BTCUSD formats
        normalized_symbol = symbol.upper().strip()

        # Try different symbol formats
        symbol_variants = [normalized_symbol]

        if "/" not in normalized_symbol and len(normalized_symbol) >= 6:
            # Convert BTCUSD to BTC/USD
            symbol_variants.append(f"{normalized_symbol[:3]}/{normalized_symbol[3:]}")
            symbol_variants.append(f"{normalized_symbol[:4]}/{normalized_symbol[4:]}")

        if "/" in normalized_symbol:
            # Convert BTC/USD to BTCUSD
            symbol_variants.append(normalized_symbol.replace("/", ""))

        # Build query with proper database compatibility
        if hasattr(db, 'db_type') and db.db_type == "postgresql":
            query = """
                SELECT tp.id, tp.symbol, tp.base_currency, tp.quote_currency,
                       tp.min_trade_amount, tp.max_trade_amount, tp.price_precision,
                       tp.amount_precision, tp.is_active, tp.created_at, tp.updated_at,
                       bc.name as base_currency_name, bc.symbol as base_currency_symbol,
                       qc.name as quote_currency_name, qc.symbol as quote_currency_symbol,
                       bc.is_fiat as base_is_fiat, qc.is_fiat as quote_is_fiat
                FROM trading_pairs tp
                LEFT JOIN currencies bc ON tp.base_currency = bc.code
                LEFT JOIN currencies qc ON tp.quote_currency = qc.code
                WHERE tp.symbol = %s
            """
        else:
            query = """
                SELECT tp.id, tp.symbol, tp.base_currency, tp.quote_currency,
                       tp.min_trade_amount, tp.max_trade_amount, tp.price_precision,
                       tp.amount_precision, tp.is_active, tp.created_at, tp.updated_at,
                       bc.name as base_currency_name, bc.symbol as base_currency_symbol,
                       qc.name as quote_currency_name, qc.symbol as quote_currency_symbol,
                       bc.is_fiat as base_is_fiat, qc.is_fiat as quote_is_fiat
                FROM trading_pairs tp
                LEFT JOIN currencies bc ON tp.base_currency = bc.code
                LEFT JOIN currencies qc ON tp.quote_currency = qc.code
                WHERE tp.symbol = ?
            """

        # Try each symbol variant
        results = None
        matched_symbol = None

        for variant in symbol_variants:
            results = db.execute_query(query, (variant,))
            if results:
                matched_symbol = variant
                break

        # If no data found in database, return mock data for common pairs
        if not results:
            if normalized_symbol in ["BTCUSD", "BTC/USD"]:
                mock_pair = {
                    "id": "mock-btc-usd",
                    "symbol": "BTC/USD",
                    "base_currency": "BTC",
                    "quote_currency": "USD",
                    "base_currency_name": "Bitcoin",
                    "quote_currency_name": "US Dollar",
                    "base_currency_symbol": "₿",
                    "quote_currency_symbol": "$",
                    "base_is_fiat": False,
                    "quote_is_fiat": True,
                    "min_trade_amount": 0.001,
                    "max_trade_amount": 100.0,
                    "price_precision": 2,
                    "amount_precision": 8,
                    "is_active": True,
                    "created_at": "2024-01-01T00:00:00Z",
                    "updated_at": "2024-01-01T00:00:00Z"
                }

                return DataResponse(
                    success=True,
                    message=f"Retrieved trading pair: {symbol} (mock data)",
                    data=mock_pair
                )

            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Trading pair '{symbol}' not found"
            )

        pair = results[0]

        # Format the response data
        formatted_pair = {
            "id": pair['id'],
            "symbol": pair['symbol'],
            "base_currency": {
                "code": pair['base_currency'],
                "name": pair.get('base_currency_name', pair['base_currency']),
                "symbol": pair.get('base_currency_symbol', ''),
                "is_fiat": pair.get('base_is_fiat', False)
            },
            "quote_currency": {
                "code": pair['quote_currency'],
                "name": pair.get('quote_currency_name', pair['quote_currency']),
                "symbol": pair.get('quote_currency_symbol', ''),
                "is_fiat": pair.get('quote_is_fiat', True)
            },
            "min_trade_amount": float(pair['min_trade_amount']) if pair['min_trade_amount'] else None,
            "max_trade_amount": float(pair['max_trade_amount']) if pair['max_trade_amount'] else None,
            "price_precision": pair['price_precision'],
            "amount_precision": pair['amount_precision'],
            "is_active": pair['is_active'],
            "created_at": pair['created_at'],
            "updated_at": pair['updated_at']
        }

        return DataResponse(
            success=True,
            message=f"Retrieved trading pair: {symbol}",
            data=formatted_pair
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error retrieving trading pair '{symbol}': {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error retrieving trading pair: {str(e)}"
        )


@router.get("/{symbol}/validate", response_model=DataResponse)
async def validate_trading_pair(
    symbol: str,
    amount: Optional[float] = None,
    db: DatabaseManager = Depends(get_database)
):
    """
    Validate a trading pair and optionally check trade amount constraints
    """
    try:
        # Get the trading pair first
        pair_response = await get_trading_pair(symbol, db)
        pair_data = pair_response.data

        errors = []
        warnings = []

        # Check if pair is active
        if not pair_data['is_active']:
            errors.append(f"Trading pair '{symbol}' is not active")

        # Check amount constraints if provided
        if amount is not None:
            min_amount = pair_data.get('min_trade_amount')
            max_amount = pair_data.get('max_trade_amount')

            if min_amount and amount < min_amount:
                errors.append(f"Trade amount {amount} is below minimum {min_amount}")

            if max_amount and amount > max_amount:
                errors.append(f"Trade amount {amount} exceeds maximum {max_amount}")

        is_valid = len(errors) == 0

        validation_result = {
            "is_valid": is_valid,
            "symbol": pair_data['symbol'],
            "base_currency": pair_data['base_currency']['code'],
            "quote_currency": pair_data['quote_currency']['code'],
            "constraints": {
                "min_trade_amount": pair_data.get('min_trade_amount'),
                "max_trade_amount": pair_data.get('max_trade_amount'),
                "price_precision": pair_data['price_precision'],
                "amount_precision": pair_data['amount_precision'],
                "is_active": pair_data['is_active']
            },
            "errors": errors,
            "warnings": warnings
        }

        if amount is not None:
            validation_result["validated_amount"] = amount

        return DataResponse(
            success=True,
            message=f"Validation result for trading pair: {symbol}",
            data=validation_result
        )

    except HTTPException as e:
        if e.status_code == 404:
            # Trading pair not found
            validation_result = {
                "is_valid": False,
                "symbol": symbol,
                "errors": [f"Trading pair '{symbol}' does not exist"],
                "warnings": []
            }

            return DataResponse(
                success=True,
                message=f"Validation result for trading pair: {symbol}",
                data=validation_result
            )
        else:
            raise
    except Exception as e:
        logger.error(f"Error validating trading pair '{symbol}': {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error validating trading pair: {str(e)}"
        )
