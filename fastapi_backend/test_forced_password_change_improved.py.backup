#!/usr/bin/env python3
"""
Improved Forced Password Change System Test Script
Handles rate limiting gracefully and provides better debugging
"""

import requests
import json
import time
import sys
from typing import Dict, Any, Optional

class TestRunner:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.test_results = []
        
    def log(self, message: str, level: str = "INFO"):
        """Enhanced logging with timestamps"""
        timestamp = time.strftime("%H:%M:%S")
        if level == "ERROR":
            print(f"❌ [{timestamp}] {message}")
        elif level == "SUCCESS":
            print(f"✅ [{timestamp}] {message}")
        elif level == "WARNING":
            print(f"⚠️  [{timestamp}] {message}")
        else:
            print(f"ℹ️  [{timestamp}] {message}")
    
    def handle_rate_limit(self, response: requests.Response, endpoint: str) -> bool:
        """Handle rate limit responses gracefully"""
        if response.status_code == 429:
            try:
                error_data = response.json()
                retry_after = error_data.get('retry_after', 30)
                self.log(f"Rate limit hit on {endpoint}. Waiting {retry_after}s...", "WARNING")
                time.sleep(retry_after + 1)  # Add 1 second buffer
                return True
            except:
                self.log(f"Rate limit hit on {endpoint}. Waiting 30s...", "WARNING")
                time.sleep(31)
                return True
        return False
    
    def make_request(self, method: str, endpoint: str, **kwargs) -> requests.Response:
        """Make request with automatic rate limit handling"""
        url = f"{self.base_url}{endpoint}"
        max_retries = 3
        
        for attempt in range(max_retries):
            try:
                if method.upper() == "POST":
                    response = self.session.post(url, **kwargs)
                elif method.upper() == "GET":
                    response = self.session.get(url, **kwargs)
                else:
                    raise ValueError(f"Unsupported method: {method}")
                
                # Handle rate limits
                if self.handle_rate_limit(response, endpoint):
                    if attempt < max_retries - 1:
                        self.log(f"Retrying {endpoint} (attempt {attempt + 2}/{max_retries})")
                        continue
                    else:
                        self.log(f"Max retries exceeded for {endpoint}", "ERROR")
                        return response
                
                return response
                
            except requests.exceptions.RequestException as e:
                self.log(f"Request error on {endpoint}: {e}", "ERROR")
                if attempt < max_retries - 1:
                    time.sleep(2 ** attempt)  # Exponential backoff
                    continue
                raise
        
        raise Exception(f"Failed to complete request to {endpoint} after {max_retries} attempts")
    
    def test_user_creation(self) -> Optional[str]:
        """Test 1: Create user with forced password change requirement"""
        self.log("Creating user with forced password change requirement...")
        
        user_data = {
            "email": "testuser@example.com",
            "first_name": "Test",
            "last_name": "User",
            "role": "user"
        }
        
        response = self.make_request(
            "POST", 
            "/api/v1/admin/users",
            json=user_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 201:
            result = response.json()
            user_id = result.get("user_id")
            temp_password = result.get("temporary_password")
            
            self.log(f"User created successfully! ID: {user_id}", "SUCCESS")
            self.log(f"Temporary password: {temp_password}")
            
            # Store for later tests
            return {
                "user_id": user_id,
                "email": "testuser@example.com",
                "temp_password": temp_password
            }
        else:
            try:
                error_detail = response.json()
                self.log(f"User creation failed: {response.status_code}", "ERROR")
                self.log(f"Response: {error_detail}", "ERROR")
            except:
                self.log(f"User creation failed: {response.status_code} - {response.text}", "ERROR")
            return None
    
    def test_forced_login(self, user_data: Dict[str, Any]) -> Optional[str]:
        """Test 2: Attempt login and get forced password change response"""
        self.log("Testing login with forced password change...")
        
        login_data = {
            "username": user_data["email"],
            "password": user_data["temp_password"]
        }
        
        response = self.make_request(
            "POST",
            "/api/v1/auth/login",
            json=login_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get("must_change_password"):
                temp_token = result.get("temporary_token")
                self.log("Login correctly blocked - must change password!", "SUCCESS")
                self.log(f"Temporary token received: {temp_token[:20]}...")
                return temp_token
            else:
                self.log("Login succeeded but should have been blocked!", "ERROR")
                return None
        else:
            try:
                error_detail = response.json()
                self.log(f"Login failed: {response.status_code}", "ERROR")
                self.log(f"Response: {error_detail}", "ERROR")
            except:
                self.log(f"Login failed: {response.status_code} - {response.text}", "ERROR")
            return None
    
    def test_password_change(self, temp_token: str) -> Optional[str]:
        """Test 3: Change password using temporary token"""
        self.log("Testing password change with temporary token...")
        
        change_data = {
            "current_password": "",  # Not needed with temp token
            "new_password": "NewSecurePassword123!"
        }
        
        response = self.make_request(
            "POST",
            "/api/v1/auth/change-password",
            json=change_data,
            headers={
                "Authorization": f"Bearer {temp_token}",
                "Content-Type": "application/json"
            }
        )
        
        if response.status_code == 200:
            result = response.json()
            access_token = result.get("access_token")
            self.log("Password changed successfully!", "SUCCESS")
            self.log(f"New access token received: {access_token[:20]}...")
            return access_token
        else:
            try:
                error_detail = response.json()
                self.log(f"Password change failed: {response.status_code}", "ERROR")
                self.log(f"Response: {error_detail}", "ERROR")
            except:
                self.log(f"Password change failed: {response.status_code} - {response.text}", "ERROR")
            return None
    
    def test_normal_login(self, user_data: Dict[str, Any]) -> Optional[str]:
        """Test 4: Normal login after password change"""
        self.log("Testing normal login after password change...")
        
        login_data = {
            "username": user_data["email"],
            "password": "NewSecurePassword123!"
        }
        
        response = self.make_request(
            "POST",
            "/api/v1/auth/login",
            json=login_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            result = response.json()
            if not result.get("must_change_password"):
                access_token = result.get("access_token")
                self.log("Normal login successful!", "SUCCESS")
                self.log(f"Access token received: {access_token[:20]}...")
                return access_token
            else:
                self.log("Login still requires password change!", "ERROR")
                return None
        else:
            try:
                error_detail = response.json()
                self.log(f"Normal login failed: {response.status_code}", "ERROR")
                self.log(f"Response: {error_detail}", "ERROR")
            except:
                self.log(f"Normal login failed: {response.status_code} - {response.text}", "ERROR")
            return None
    
    def test_protected_endpoint(self, access_token: str) -> bool:
        """Test 5: Access protected endpoint"""
        self.log("Testing access to protected endpoint...")
        
        response = self.make_request(
            "GET",
            "/api/v1/auth/me",
            headers={"Authorization": f"Bearer {access_token}"}
        )
        
        if response.status_code == 200:
            result = response.json()
            self.log("Protected endpoint access successful!", "SUCCESS")
            self.log(f"User info: {result.get('email', 'No email')}")
            return True
        else:
            try:
                error_detail = response.json()
                self.log(f"Protected endpoint access failed: {response.status_code}", "ERROR")
                self.log(f"Response: {error_detail}", "ERROR")
            except:
                self.log(f"Protected endpoint access failed: {response.status_code} - {response.text}", "ERROR")
            return False
    
    def run_all_tests(self) -> bool:
        """Run the complete test suite"""
        print("🚀 Starting Enhanced Forced Password Change System Tests")
        print("=" * 60)
        print("🧪 Testing Forced Password Change System")
        print("=" * 40)
        print("")
        
        # Test 1: User Creation
        user_data = self.test_user_creation()
        if not user_data:
            print("\n❌ Test suite failed at user creation")
            return False
        
        print("")
        
        # Test 2: Forced Login
        temp_token = self.test_forced_login(user_data)
        if not temp_token:
            print("\n❌ Test suite failed at forced login")
            return False
        
        print("")
        
        # Test 3: Password Change
        access_token = self.test_password_change(temp_token)
        if not access_token:
            print("\n❌ Test suite failed at password change")
            return False
        
        print("")
        
        # Test 4: Normal Login
        final_token = self.test_normal_login(user_data)
        if not final_token:
            print("\n❌ Test suite failed at normal login")
            return False
        
        print("")
        
        # Test 5: Protected Endpoint
        if not self.test_protected_endpoint(final_token):
            print("\n❌ Test suite failed at protected endpoint access")
            return False
        
        print("")
        print("✅ ALL TESTS PASSED! 🎉")
        print("=" * 40)
        print("🎯 Forced Password Change System is working correctly!")
        return True

def main():
    """Main test function"""
    test_runner = TestRunner()
    
    try:
        success = test_runner.run_all_tests()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n⏹️  Tests interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n💥 Test suite crashed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
